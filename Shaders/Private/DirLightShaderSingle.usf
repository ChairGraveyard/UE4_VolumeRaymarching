#include "/Engine/Private/Common.ush"

// Thx Temaran for original HLSL & usage example

/**
	Uniform Buffers have been replaced by regular shader parameters, as most are subject to change between calls.
*/

RWTexture3D<float> ALightVolume;

RWTexture2D<float> WriteBuffer;
Texture2D ReadBuffer;

uint Loop;

Texture3D Volume;

Texture2D TransferFunc;

float3 LightPosition;

float LightIntensity;

int bAdded;

float3 LocalClippingCenter;

float3 LocalClippingDirection;

// Going from
// 0 = +X, 1 = -X, 2 = Y, 3 = -Y, 4 = Z, 5 = -Z
uint Axis;

float Weight;

// The shader code is common for all axes and always 2D in X and Y space
// If going along X - threadgroup X = Volume Y dimension, threadgroup Y = Volume Z dimension
// If going along Y - threadgroup X = Volume X dimension, threadgroup Y = Volume Z dimension
// If going along Z - threadgroup X = Volume X dimension, threadgroup Y = Volume Y dimension (the simple case)

SamplerState TransferFuncSampler;


SamplerState VolumeSampler;
//{
//    Filter = MIN_MAG_MIP_LINEAR;
//    AddressU = Clamp;
//    AddressV = Clamp;
//    AddressW = Clamp;
//};

// The buffer shall use a hard-set border color (the light outside the volume is not occluded by anything ->
// sampling outside means full original light.
SamplerState ReadBufferSampler;
//{
//    Filter = MIN_MAG_MIP_LINEAR;
//    AddressU = Clamp;
//    AddressV = Clamp;
//    AddressW = Clamp;
//    BorderColor = float4(LightColor, LightIntensity);
//};

int3 GetPos(uint3 threadId, uint3 VolumeSize)
{
    switch (Axis)
    {
        case 0:
            return int3(VolumeSize.x - 1 - Loop, threadId.x, threadId.y);
        case 1:
            return int3(Loop, VolumeSize.y - 1 - threadId.x, threadId.y);
        case 2:
            return int3(VolumeSize.x - threadId.x - 1, VolumeSize.y - 1 - Loop, threadId.y);
        case 3:
            return int3(threadId.x, Loop, threadId.y);
        case 4:
            return int3(threadId.x, threadId.y, VolumeSize.z - 1 - Loop);
        case 5:
            return int3(threadId.x, VolumeSize.y - threadId.y - 1, Loop);
        default:
            return int3(0, 0, 0);
    }
}

float2 GetPixOffset()
{
    float3 normLightPosition = LightPosition;
	// Normalize the light position to get the major axis to be one. The other 2 components are then an offset to apply to current pos
	// to read from our read buffer texture.
    switch (Axis)
    {
        case 0:
            normLightPosition /= normLightPosition.x;
            return normLightPosition.yz;
        case 1:
            normLightPosition /= -normLightPosition.x;
            return float2(-normLightPosition.y, normLightPosition.z);
        case 2:
            normLightPosition /= normLightPosition.y;
            return float2(-normLightPosition.x, normLightPosition.z);
        case 3:
            normLightPosition /= -normLightPosition.y;
            return normLightPosition.xz;
        case 4:
            normLightPosition /= normLightPosition.z;
            return normLightPosition.xy;
        case 5:
            normLightPosition /= -normLightPosition.z;
            return float2(normLightPosition.x, -normLightPosition.y);
        default:
            return float2(0, 0);
    }
}

float2 GetUV(float2 pos, float2 texSize)
{
    float2 offset = GetPixOffset();
    return (pos + float2(0.5, 0.5) + offset) / texSize;
}


float3 GetUVW(uint3 pos, float3 dimensions)
{
	// Sample centers of data points.
    return (pos + float3(0.5, 0.5, 0.5)) / dimensions;
}

[numthreads(32, 32, 1)]
void MainComputeShader(uint3 ThreadId : SV_DispatchThreadID)
{
	//Set up some variables we are going to need
    float sizeX, sizeY, sizeZ;
    ALightVolume.GetDimensions(sizeX, sizeY, sizeZ);
    uint3 uResolution = uint3(sizeX, sizeY, sizeZ);

	// Todo keep whole float4, not just alpha
    uint3 actualPos = uint3(ThreadId.x, ThreadId.y, ThreadId.z);
    int3 pos = GetPos(actualPos, uResolution);
    float2 pixelLoc = actualPos.xy;
    float oldAlpha = ALightVolume[pos];

    if (Loop == 0)
    {
        // float4 color = float4(LightColor, Weight * LightIntensity);
        // The (-1,-1) sample is here just to make sure that the border color is set properly.
        // If the border color wasn't good, this would fuck up.
        float color = ReadBuffer.SampleLevel(ReadBufferSampler, float2(-1, -1), 0);
        //float color = Weight * LightIntensity;
        
        WriteBuffer[pixelLoc] = color;
        color *= bAdded;
        ALightVolume[pos] = oldAlpha + color;
    }
    else
    {

        float texSizeX, texSizeY;
        WriteBuffer.GetDimensions(texSizeX, texSizeY);
        
        float cursample = 0;
        float4 colorsample = 0;

		// TODO! Set pix offset as a uniform. EVEN better : Save it in UV offset!
		// + (0.5, 0.5) to sample the centers of pixels!
        float2 prevXY = actualPos.xy + float2(0.5, 0.5) + GetPixOffset();
        float2 prevUV = (prevXY) / float2(texSizeX, texSizeY);
        float previousLightColor = ReadBuffer.SampleLevel(ReadBufferSampler, prevUV, 0);
	
        float3 iResolution = float3(sizeX, sizeY, sizeZ);
        float3 uvw = GetUVW(pos, iResolution);

        // Ignore clipped.
        if (dot(uvw - LocalClippingCenter, LocalClippingDirection) < 0)
        {
            colorsample = float4(0, 0, 0, 0);
        }
        else
        {
            cursample = Volume.SampleLevel(VolumeSampler, uvw, 0);
		    // Get Color&alpha from intensity
            colorsample = TransferFunc.SampleLevel(TransferFuncSampler, float2(cursample, 0.5f), 0);
        }

        float alpha = 0;
        alpha = previousLightColor * (1 - (colorsample.a));

		// The read/write buffers have always positive alpha
        WriteBuffer[actualPos.xy] = alpha;
		// Adding Color to the volume depends on if we're adding or removing.
        // if we're removing a light, multiply initial alpha by -1.
        alpha *= bAdded;
        ALightVolume[pos] = oldAlpha + alpha;
		// TODO handle colors properly!

	// Sample readBuffer at [pos - lightVec]
    }
    
}



// Deprecated
//int3 GetPosIncrementVector()
//{
//    switch (Axis)
//    {
//        case 0:
//            return int3(-1,  0,  0);
//        case 1:
//            return int3( 1,  0,  0);
//        case 2:
//            return int3( 0, -1,  0);
//        case 3:
//            return int3( 0,  1,  0);
//        case 4:
//            return int3( 0,  0, -1);
//        case 5:
//            return int3( 0,  0,  1);
//		default:
//            return int3(0, 0, 0);
//    }
//}

//int3 GetFirstPos(uint3 threadId, uint3 VolumeSize)
//{
//    switch (Axis)
//    {
//        case 0:
//            return int3(VolumeSize.x - 1, threadId.x, threadId.y);
//        case 1:
//            return int3(0, threadId.x, threadId.y);
//        case 2:
//            return int3(threadId.x, VolumeSize.y - 1, threadId.y);
//        case 3:
//            return int3(threadId.x, 0, threadId.y);
//        case 4:
//            return int3(threadId.x, threadId.y, VolumeSize.z - 1);
//        case 5:
//            return int3(threadId.x, threadId.y, 0);
//        default:
//            return int3(0, 0, 0);
//    }
//}

//int3 GetLastPos(uint3 threadId, uint3 VolumeSize)
//{
//    switch (Axis)
//    {
//        case 0:
//            return int3(0, threadId.x, threadId.y);
//        case 1:
//            return int3(VolumeSize.x - 1, threadId.x, threadId.y);
//        case 2:
//            return int3(threadId.x, 0, threadId.y);
//        case 3:
//            return int3(threadId.x, VolumeSize.y - 1, threadId.y);
//        case 4:
//            return int3(threadId.x, threadId.y, 0);
//        case 5:
//            return int3(threadId.x, threadId.y, VolumeSize.z - 1);
//        default:
//            return int3(0, 0, 0);
//    }
//}

//int GetLoopCount(uint3 VolumeSize)
//{
//    switch (Axis)
//    {
//        case 0:
//        case 1:
//            return VolumeSize.x;
//        case 2:
//        case 3:
//            return VolumeSize.y;
//        case 4:
//        case 5:
//            return VolumeSize.z;
//        default:
//            return 1;
//    }
//}


// Get location of the pixel in the read/write buffer for current position.
//uint2 GetPixLocation(uint3 pos, uint3 dimensions)
//{
//    switch (Axis)
//    {
//        case 0:
//            return pos.yz;
//        case 1:
//            return uint2(dimensions.y - pos.y - 1, pos.z);
//        case 2:
//            return uint2(dimensions.x - pos.x - 1, pos.z);
//        case 3:
//            return pos.xz;
//        case 4:
//            return pos.xy;
//        case 5:
//            return uint2(pos.x, dimensions.y - pos.y - 1);
//        default:
//            return uint2(0, 0);
//    }
//}

