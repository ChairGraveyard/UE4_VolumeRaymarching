#include "/Engine/Private/Common.ush"
#include "DirLightCommon.usf"

// Thx Temaran for original HLSL & usage example

/**
	Uniform Buffers have been replaced by regular shader parameters, as most are subject to change between calls.
*/

RWTexture3D<float> ALightVolume;

RWTexture2D<float> WriteBuffer;
Texture2D ReadBuffer;

int Loop;

Texture3D Volume;

Texture2D TransferFunc;

float3 LightPosition;

float LightIntensity;

int bAdded;

float3 LocalClippingCenter;
float3 LocalClippingDirection;

// Going from
// 0 = +X, 1 = -X, 2 = Y, 3 = -Y, 4 = Z, 5 = -Z
uint Axis;

float Weight;

float2 TFIntensityDomain;

float2 pixOffset;

uint3 VolumeSize;

float3x3 PermutationMatrix;


// The shader code is common for all axes and always 2D in X and Y space
// If going along X - threadgroup X = Volume Y dimension, threadgroup Y = Volume Z dimension
// If going along Y - threadgroup X = Volume X dimension, threadgroup Y = Volume Z dimension
// If going along Z - threadgroup X = Volume X dimension, threadgroup Y = Volume Y dimension (the simple case)

SamplerState TransferFuncSampler;

SamplerState VolumeSampler;

// The buffer shall use a hard-set border color (the light outside the volume is not occluded by anything ->
// sampling outside means full original light.
SamplerState ReadBufferSampler;

[numthreads(32, 32, 1)]
void MainComputeShader(uint2 PixelLoc : SV_DispatchThreadID)
{
    //int3 pos = GetPosNew(pixelLoc, VolumeSize, Loop, Axis);
    
    int3 pos = mul(int3(PixelLoc.x, PixelLoc.y, Loop), PermutationMatrix);

    float texSizeX, texSizeY;
    WriteBuffer.GetDimensions(texSizeX, texSizeY);

    float3 uvw = GetUVW(pos, VolumeSize);
        
    float cursample = 0;
    float colorsample = 0;

    float2 prevUV = (PixelLoc + pixOffset) / float2(texSizeX, texSizeY);
    float previousLightAlpha = ReadBuffer.SampleLevel(ReadBufferSampler, prevUV, 0);
	
    float CurrentLightAlpha;
    // Ignore clipped regions.
    if (dot(uvw - LocalClippingCenter, LocalClippingDirection) < 0)
    {
        // Avoid calculations that would be unnecessary. Just propagate previous light unchanged and add it to volume.
        CurrentLightAlpha = previousLightAlpha;
    }
    else
    {
        cursample = Volume.SampleLevel(VolumeSampler, uvw, 0);
        cursample = RemapIntensity(cursample, TFIntensityDomain);
        // Get Color&alpha from intensity
        colorsample = TransferFunc.SampleLevel(TransferFuncSampler, float2(cursample, 0.5f), 0).a;
        CurrentLightAlpha = previousLightAlpha * (1 - (colorsample));
    }


	// The read/write buffers have always positive alpha
    WriteBuffer[PixelLoc] = CurrentLightAlpha;
	// Adding Color to the volume depends on if we're adding or removing.
    // if we're removing a light, multiply initial alpha by -1.
    ALightVolume[pos] = ALightVolume[pos] + (CurrentLightAlpha * bAdded);
}